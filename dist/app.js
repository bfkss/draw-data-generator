// Generated by CoffeeScript 1.10.0
(function() {
  var DG, DrawDataGenerator;

  DrawDataGenerator = (function() {
    function DrawDataGenerator(parent, width, height) {
      var self, svg;
      this.parent = parent != null ? parent : 'body';
      this.width = width != null ? width : 900;
      this.height = height != null ? height : 810;
      if (!d3) {
        console.error('you need d3.js to use the data-generator');
        return;
      }
      self = this;
      this.data = [];
      this.latLngData = [];
      this.scagnosticsData = {
        points: []
      };
      d3.select('body').style('background-color', 'grey');
      svg = d3.select(this.parent).append('svg').attr({
        width: this.width,
        height: this.height
      }).style('border', '1px solid darkgray');
      this.g = svg.append('g');
      svg.on('mousemove', function() {
        self.pos = d3.mouse(this);
        if (d3.event.shiftKey && !this.interval) {
          return this.interval = setInterval(function() {
            return self.draw();
          }, 100);
        } else if (!d3.event.shiftKey && this.interval) {
          clearInterval(this.interval);
          return this.interval = null;
        }
      });
      document.onkeypress = (function(_this) {
        return function(e) {
          if (e.which === 32) {
            _this.printPxData();
            _this.convertToLatLngData();
            _this.convertToGeoJSON();
            return _this.convertToScagnosticsData();
          }
        };
      })(this);
    }

    DrawDataGenerator.prototype.draw = function() {
      this.data.push(this.pos);
      return this.g.selectAll('circle').data(this.data).enter().append('circle').attr({
        cx: function(d) {
          return d[0];
        },
        cy: function(d) {
          return d[1];
        },
        r: 5,
        fill: 'blue',
        opacity: .3,
        stroke: 'darkblue'
      });
    };

    DrawDataGenerator.prototype.clear = function() {
      this.data = [];
      return this.g.selectAll('circle').data([]).exit().remove();
    };

    DrawDataGenerator.prototype.convertToLatLngData = function() {
      var file, i, len, pos, ref, x, y;
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        pos = ref[i];
        x = pos[0];
        y = pos[1];
        this.latLngData.push([Math.round10(-(y - (this.height / 2)) * (180 / this.height), -4), Math.round10((x - (this.width / 2)) * (360 / this.width), -4)]);
      }
      console.log('latLng-data output:');
      console.log(this.latLngData);
      file = document.createElement('a');
      file.download = 'latLng.json';
      file.textContent = 'lat-lng file';
      file.href = 'data:application/json;base64,' + window.btoa(unescape(encodeURIComponent(JSON.stringify(this.latLngData))));
      document.body.appendChild(file);
      return document.body.appendChild(document.createElement('br'));
    };

    DrawDataGenerator.prototype.convertToGeoJSON = function() {
      var feature, file, i, len, pos, ref, x, y;
      this.geoJSON = {
        type: "FeatureCollection",
        features: []
      };
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        pos = ref[i];
        x = pos[0];
        y = pos[1];
        feature = {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: [Math.round10((x - (this.width / 2)) * (360 / this.width), -4), Math.round10(-(y - (this.height / 2)) * (180 / this.height), -4)]
          }
        };
        this.geoJSON.features.push(feature);
      }
      console.log('GeoJSON output:');
      console.log(this.geoJSON);
      file = document.createElement('a');
      file.download = 'geoJSON.json';
      file.textContent = 'GeoJSON file';
      file.href = 'data:application/json;base64,' + window.btoa(unescape(encodeURIComponent(JSON.stringify(this.geoJSON))));
      document.body.appendChild(file);
      return document.body.appendChild(document.createElement('br'));
    };

    DrawDataGenerator.prototype.convertToScagnosticsData = function() {
      var file, i, len, pos, ref, x, y;
      ref = this.data;
      for (i = 0, len = ref.length; i < len; i++) {
        pos = ref[i];
        x = pos[0];
        y = pos[1];
        this.scagnosticsData.points.push({
          x: x,
          y: y
        });
      }
      console.log('scagnostics-data output:');
      console.log(this.scagnosticsData);
      file = document.createElement('a');
      file.download = 'scagnosticsData.json';
      file.textContent = 'scagnostics-data file';
      file.href = 'data:application/json;base64,' + window.btoa(unescape(encodeURIComponent(JSON.stringify(this.scagnosticsData))));
      document.body.appendChild(file);
      return document.body.appendChild(document.createElement('br'));
    };

    DrawDataGenerator.prototype.printPxData = function() {
      var file;
      console.log('pixel-data output:');
      console.log(this.data);
      file = document.createElement('a');
      file.download = 'pixelData.json';
      file.textContent = 'pixel-data file';
      file.href = 'data:application/json;base64,' + window.btoa(unescape(encodeURIComponent(JSON.stringify(this.data))));
      document.body.appendChild(file);
      return document.body.appendChild(document.createElement('br'));
    };

    return DrawDataGenerator;

  })();

  DG = new DrawDataGenerator('main', document.body.clientWidth, document.documentElement.clientHeight - 22);

}).call(this);
